<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术/Golang/开发 on LX 知识库</title><link>https://namejlt.github.io/categories/%E6%8A%80%E6%9C%AF/golang/%E5%BC%80%E5%8F%91/</link><description>Recent content in 技术/Golang/开发 on LX 知识库</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 04 Jul 2025 17:00:00 +0800</lastBuildDate><atom:link href="https://namejlt.github.io/categories/%E6%8A%80%E6%9C%AF/golang/%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>golang依赖注入实践</title><link>https://namejlt.github.io/posts/tech/golang/dev/go-dep-inject/</link><pubDate>Fri, 04 Jul 2025 17:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/golang/dev/go-dep-inject/</guid><description>
&lt;h2 id="golang-依赖注入详解深入解析-googlewire">Golang 依赖注入详解，深入解析 Google/Wire&lt;/h2>
&lt;p>在软件工程中，&lt;strong>依赖注入 (Dependency Injection, DI)&lt;/strong> 是一种重要的设计模式，其核心思想是解耦组件之间的依赖关系。一个对象的依赖不再由其内部创建，而是由外部实体“注入”。这种控制反转 (Inversion of Control, IoC) 的模式可以显著提高代码的模块化、可测试性和可维护性。&lt;/p></description></item></channel></rss>