<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术/实践/后端 on LX 知识库</title><link>https://namejlt.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%AE%9E%E8%B7%B5/%E5%90%8E%E7%AB%AF/</link><description>Recent content in 技术/实践/后端 on LX 知识库</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 02 Jul 2025 16:25:00 +0800</lastBuildDate><atom:link href="https://namejlt.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%AE%9E%E8%B7%B5/%E5%90%8E%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://namejlt.github.io/posts/tech/practice/backend/golang-project-deploy-rule/</link><pubDate>Wed, 02 Jul 2025 16:25:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/practice/backend/golang-project-deploy-rule/</guid><description>
&lt;h2 id="go-web服务与异步任务部署最佳实践">Go Web服务与异步任务部署最佳实践&lt;/h2>
&lt;p>&lt;strong>对于一个同时包含在线 Web/RPC 服务和离线异步脚本的 Go 项目，我们探讨其最佳的开发与部署规范。这不仅仅是一个技术选型问题，更是一个关乎系统长期健康、团队协作效率和业务扩展能力的架构决策。&lt;/strong>&lt;/p></description></item><item><title>服务治理相关实践-skywalking</title><link>https://namejlt.github.io/posts/tech/practice/backend/service-manage-skywalking/</link><pubDate>Tue, 01 Jul 2025 09:25:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/practice/backend/service-manage-skywalking/</guid><description>
&lt;h2 id="skywalking-全景解析从核心逻辑到存储结构的深度剖析">SkyWalking 全景解析：从核心逻辑到存储结构的深度剖析&lt;/h2>
&lt;p>在微服务架构日益盛行的今天，如何有效地观测、监控和诊断分布式系统成为了开发者和运维工程师面临的巨大挑战。Apache SkyWalking 作为一款顶级的开源应用性能监控（APM）工具，为分布式系统的可观测性提供了强大的解决方案。本文将带你全面了解 SkyWalking，深入探讨其核心业务逻辑、数据收集与串联机制，并揭示其底层的数据存储结构。&lt;/p></description></item><item><title>后端常用技术总结</title><link>https://namejlt.github.io/posts/tech/practice/backend/backend-summary/</link><pubDate>Thu, 15 May 2025 10:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/practice/backend/backend-summary/</guid><description>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>服务端通用，需要了解和掌握的知识&lt;/p>
&lt;p>服务端提供稳定、可靠的服务，给用户快速的体验，保存用户数据，返回用户数据&lt;/p>
&lt;ul>
&lt;li>高可用 - 冗余设计，容错处理，自动恢复&lt;/li>
&lt;li>高并发 - 支持大量请求&lt;/li>
&lt;li>高性能 - 快速处理单个请求，并减少资源消耗&lt;/li>
&lt;/ul>
&lt;p>很多东西都是共性，且长时间不变的，需要去绝对掌握&lt;/p></description></item></channel></rss>