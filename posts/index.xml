<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on LX 知识库</title><link>https://namejlt.github.io/posts/</link><description>Recent content in Posts on LX 知识库</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 22 May 2025 16:00:00 +0800</lastBuildDate><atom:link href="https://namejlt.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>AI 应用开发-002 PROMPT 提示词</title><link>https://namejlt.github.io/posts/tech/ai/app-dev/002-prompt/</link><pubDate>Thu, 22 May 2025 16:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/ai/app-dev/002-prompt/</guid><description>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>Prompt工程是AI应用开发中的关键技术，它关注如何通过优化提示词来提升AI模型的输出质量。本文将从原理、关键原则到实战技巧，全面介绍Prompt工程。&lt;/p>
&lt;p>通用大模型，需要prompt优化；推理模型，仅需信任大模型，简洁指令聚焦目标即可，这里主要讨论通用大模型的prompt优化。&lt;/p>
&lt;p>大模型相当于一个拥有很多知识的人，掌握好提问，才能让大模型更好的理解你的意图，得到想要的结果，学会有个格式的提问，就是prompt的核心。&lt;/p>
&lt;p>prompt 是输入给 AI 模型的指令或提示，它包含了任务描述、上下文、示例等信息。通过合理设计和优化 prompt，可以提升 AI 模型的输出质量。&lt;/p>
&lt;h2 id="一prompt工程原理">一、Prompt工程原理&lt;/h2>
&lt;h3 id="1-基本概念">1. 基本概念&lt;/h3>
&lt;ul>
&lt;li>Prompt是输入给AI模型的指令或提示&lt;/li>
&lt;li>包含任务描述、上下文、示例等信息&lt;/li>
&lt;li>决定模型理解和执行任务的方式&lt;/li>
&lt;/ul>
&lt;h3 id="2-工作机制">2. 工作机制&lt;/h3>
&lt;ul>
&lt;li>模型基于Prompt进行上下文理解&lt;/li>
&lt;li>通过注意力机制处理关键信息&lt;/li>
&lt;li>生成符合要求的输出内容&lt;/li>
&lt;/ul>
&lt;h3 id="3-影响因素">3. 影响因素&lt;/h3>
&lt;ul>
&lt;li>提示词的清晰度和具体性&lt;/li>
&lt;li>任务描述的完整性&lt;/li>
&lt;li>示例的质量和相关性&lt;/li>
&lt;li>上下文信息的充分性&lt;/li>
&lt;/ul>
&lt;h2 id="二提示词关键原则">二、提示词关键原则&lt;/h2>
&lt;h3 id="1-明确性原则">1. 明确性原则&lt;/h3>
&lt;ul>
&lt;li>使用清晰、无歧义的语言&lt;/li>
&lt;li>明确说明任务目标和要求&lt;/li>
&lt;li>提供具体的输出格式指导&lt;/li>
&lt;/ul>
&lt;h3 id="2-结构化原则">2. 结构化原则&lt;/h3>
&lt;ul>
&lt;li>合理组织提示词结构&lt;/li>
&lt;li>分步骤描述复杂任务&lt;/li>
&lt;li>保持逻辑顺序和层次&lt;/li>
&lt;/ul>
&lt;h3 id="3-相关性原则">3. 相关性原则&lt;/h3>
&lt;ul>
&lt;li>提供相关的背景信息&lt;/li>
&lt;li>包含必要的领域知识&lt;/li>
&lt;li>避免无关信息干扰&lt;/li>
&lt;/ul>
&lt;h3 id="4-可控性原则">4. 可控性原则&lt;/h3>
&lt;ul>
&lt;li>设置适当的约束条件&lt;/li>
&lt;li>定义清晰的输出范围&lt;/li>
&lt;li>提供错误处理指导&lt;/li>
&lt;/ul>
&lt;h3 id="5-迭代优化原则">5. 迭代优化原则&lt;/h3>
&lt;ul>
&lt;li>持续优化和迭代&lt;/li>
&lt;li>根据输出结果进行调整&lt;/li>
&lt;/ul>
&lt;h2 id="三提示词编写框架">三、提示词编写框架&lt;/h2>
&lt;p>优先级：&lt;/p>
&lt;p>任务 &amp;gt; 上下文 &amp;gt; 示例 &amp;gt; 角色 &amp;gt; 格式 &amp;gt; 语气&lt;/p>
&lt;h3 id="1-任务定义最重要">1. 任务定义（最重要）&lt;/h3>
&lt;ul>
&lt;li>明确说明任务类型&lt;/li>
&lt;li>定义具体目标&lt;/li>
&lt;li>设置成功标准&lt;/li>
&lt;/ul>
&lt;h3 id="2-角色设定">2. 角色设定&lt;/h3>
&lt;ul>
&lt;li>指定模型扮演的角色&lt;/li>
&lt;li>定义专业背景&lt;/li>
&lt;li>设置行为准则&lt;/li>
&lt;/ul>
&lt;h3 id="3-输出规范">3. 输出规范&lt;/h3>
&lt;ul>
&lt;li>指定输出格式&lt;/li>
&lt;li>定义质量标准&lt;/li>
&lt;li>设置长度限制&lt;/li>
&lt;/ul>
&lt;h3 id="4-上下文提供">4. 上下文提供&lt;/h3>
&lt;ul>
&lt;li>补充背景信息&lt;/li>
&lt;li>提供参考资料&lt;/li>
&lt;li>说明限制条件&lt;/li>
&lt;/ul>
&lt;h3 id="5-示例展示">5. 示例展示&lt;/h3>
&lt;ul>
&lt;li>提供优质示例&lt;/li>
&lt;li>说明关键要点&lt;/li>
&lt;li>展示最佳实践&lt;/li>
&lt;/ul>
&lt;h3 id="6-语气">6. 语气&lt;/h3>
&lt;ul>
&lt;li>输出风格&lt;/li>
&lt;li>语气语调&lt;/li>
&lt;li>避免过度表达&lt;/li>
&lt;/ul>
&lt;h2 id="四提示词编写技巧">四、提示词编写技巧&lt;/h2>
&lt;h3 id="1-格式限制技巧">1. 格式限制技巧&lt;/h3>
&lt;ul>
&lt;li>使用模板结构&lt;/li>
&lt;li>设定固定格式&lt;/li>
&lt;li>明确分隔符号&lt;/li>
&lt;/ul>
&lt;h3 id="2-区分技巧">2. 区分技巧&lt;/h3>
&lt;ul>
&lt;li>使用明确的标记&lt;/li>
&lt;li>设置清晰的边界&lt;/li>
&lt;li>避免混淆歧义&lt;/li>
&lt;/ul>
&lt;h3 id="3-小样本学习few-shot-learning">3. 小样本学习（Few-shot Learning）&lt;/h3>
&lt;ul>
&lt;li>提供相关示例&lt;/li>
&lt;li>展示输入输出对&lt;/li>
&lt;li>说明关键模式&lt;/li>
&lt;/ul>
&lt;h3 id="4-思维链chain-of-thought">4. 思维链（Chain of Thought）&lt;/h3>
&lt;ul>
&lt;li>引导逐步思考&lt;/li>
&lt;li>展示推理过程&lt;/li>
&lt;li>确保逻辑性&lt;/li>
&lt;/ul>
&lt;h3 id="5-角色扮演技巧">5. 角色扮演技巧&lt;/h3>
&lt;ul>
&lt;li>设定专业角色&lt;/li>
&lt;li>定义行为准则&lt;/li>
&lt;li>保持角色一致&lt;/li>
&lt;/ul>
&lt;h2 id="五prompt工程实战">五、Prompt工程实战&lt;/h2>
&lt;h3 id="1-文本生成优化">1. 文本生成优化&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 优化前&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;写一篇关于AI的文章&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 优化后&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">角色：你是一位专业的科技记者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">任务：写一篇关于AI发展的文章
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">要求：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">1. 篇幅1000字左右
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">2. 包含最新技术进展
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">3. 重点关注实际应用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">4. 使用通俗易懂的语言
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">格式：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">- 标题
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">- 导语
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">- 正文（分3-4个部分）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">- 总结
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-代码生成优化">2. 代码生成优化&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 优化前&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;写一个排序函数&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 优化后&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">角色：专业Python开发工程师
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">任务：实现一个高效的排序函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">要求：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">1. 使用Python语言
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">2. 支持数字和字符串排序
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">3. 包含参数类型检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">4. 添加详细注释
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">输出格式：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">1. 函数定义
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">2. 参数说明
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">3. 示例用法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">4. 性能分析
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-数据分析优化">3. 数据分析优化&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 优化前&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;分析这些销售数据&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 优化后&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prompt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">角色：数据分析专家
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">任务：分析月度销售数据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">输入数据：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">- 产品销量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">- 销售金额
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">- 客户分布
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">分析要求：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">1. 计算关键指标
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">2. 识别销售趋势
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">3. 提供改进建议
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">输出格式：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">1. 数据概览
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">2. 详细分析
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">3. 可视化建议
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">4. 行动建议
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Prompt工程是AI应用开发中的关键环节，通过合理的设计和优化可以显著提升模型输出质量。核心要点包括：&lt;/p></description></item><item><title>AI 应用开发-001 API Function Call</title><link>https://namejlt.github.io/posts/tech/ai/app-dev/001-api-function-call/</link><pubDate>Tue, 20 May 2025 09:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/ai/app-dev/001-api-function-call/</guid><description>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>AI应用开发最基础的是如何调用大模型API，以及如何使用Function Call机制。在这一阶段中，学习者将学习如何使用Python调用大模型API，例如使用DashScope平台完成情感分析、表格提取等任务，同时理解Function Call机制在工具调用中的关键作用。&lt;/p>
&lt;p>未来MCP（多智能体协作协议）将成为未来AI应用开发的核心技术。通过Function Calling机制，智能体可以调用外部工具，但是没有定义如何去调用，MCP就是规范了这个调用外部工具的协议。&lt;/p>
&lt;p>应用开发基本也解决了大模型的几个薄弱点，包括：&lt;/p>
&lt;ul>
&lt;li>上下文记忆能力&lt;/li>
&lt;li>最新信息获取能力&lt;/li>
&lt;li>专业领域知识能力&lt;/li>
&lt;/ul>
&lt;p>2025年，AI应用开发趋势主要是agent开发，更适应环境的agent。&lt;/p>
&lt;h2 id="零大模型历史和定义">零、大模型历史和定义&lt;/h2>
&lt;h3 id="大模型的历史发展">大模型的历史发展&lt;/h3>
&lt;h4 id="1-早期基础2017年之前">1. 早期基础（2017年之前）&lt;/h4>
&lt;ul>
&lt;li>传统神经网络时代&lt;/li>
&lt;li>Word2Vec、GloVe等词向量模型&lt;/li>
&lt;li>注意力机制的提出&lt;/li>
&lt;/ul>
&lt;h4 id="2-transformer革命2017">2. Transformer革命（2017）&lt;/h4>
&lt;ul>
&lt;li>Google发布Transformer架构论文&lt;/li>
&lt;li>自注意力机制带来突破性进展&lt;/li>
&lt;li>为大规模语言模型奠定基础&lt;/li>
&lt;/ul>
&lt;h4 id="3-预训练模型时代2018-2019">3. 预训练模型时代（2018-2019）&lt;/h4>
&lt;ul>
&lt;li>BERT的出现开启预训练时代&lt;/li>
&lt;li>GPT-1展示生成式模型潜力&lt;/li>
&lt;li>RoBERTa等模型不断优化性能&lt;/li>
&lt;/ul>
&lt;h4 id="4-规模化时代2020-2022">4. 规模化时代（2020-2022）&lt;/h4>
&lt;ul>
&lt;li>GPT-3展示大规模语言模型能力&lt;/li>
&lt;li>PaLM、BLOOM等超大规模模型涌现&lt;/li>
&lt;li>中文模型百川、文心等快速发展&lt;/li>
&lt;/ul>
&lt;h4 id="5-多模态融合时代2022至今">5. 多模态融合时代（2022至今）&lt;/h4>
&lt;ul>
&lt;li>GPT-4开启多模态理解新纪元&lt;/li>
&lt;li>Claude等展示更强的推理能力&lt;/li>
&lt;li>国内外大模型百花齐放&lt;/li>
&lt;/ul>
&lt;h3 id="大模型的定义">大模型的定义&lt;/h3>
&lt;h4 id="核心特征">核心特征&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>规模巨大&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>参数量通常在十亿级以上(人脑250万亿)&lt;/li>
&lt;li>训练数据规模庞大&lt;/li>
&lt;li>计算资源需求高&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>架构特点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>基于Transformer架构&lt;/li>
&lt;li>采用自注意力机制&lt;/li>
&lt;li>多层深度神经网络&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>能力表现&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>强大的自然语言理解能力&lt;/li>
&lt;li>上下文学习能力&lt;/li>
&lt;li>零样本/少样本学习能力&lt;/li>
&lt;li>指令跟随能力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="主要类型">主要类型&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>基础模型&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>通用知识储备&lt;/li>
&lt;li>基础语言理解能力&lt;/li>
&lt;li>作为下游任务基础&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>领域专用模型&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>特定领域知识深化&lt;/li>
&lt;li>专业任务优化&lt;/li>
&lt;li>垂直场景应用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多模态模型&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>文本、图像理解&lt;/li>
&lt;li>跨模态转换能力&lt;/li>
&lt;li>多模态协同推理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="应用特点">应用特点&lt;/h4>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>通用性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>适应多种任务场景&lt;/li>
&lt;li>迁移学习能力强&lt;/li>
&lt;li>知识泛化能力好&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可扩展性&lt;/strong>&lt;/p></description></item><item><title>hugo源码阅读开篇</title><link>https://namejlt.github.io/posts/tech/readcode/hugo/01start/</link><pubDate>Fri, 16 May 2025 09:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/readcode/hugo/01start/</guid><description>
&lt;p>Hugo 是目前世界上最快的网站构建框架之一，也是最受欢迎的开源静态站点生成器之一。让我们通过源码阅读来深入了解这个优秀的项目。&lt;/p>
&lt;h2 id="项目简介">项目简介&lt;/h2>
&lt;p>Hugo 是使用 Go 语言开发的开源静态站点生成器，在 &lt;a href="https://github.com/gohugoio/hugo/blob/master/LICENSE">Apache License 2.0&lt;/a> 许可下发布。&lt;/p>
&lt;p>Hugo 的定位是高性能内容发布引擎，适合注重速度、安全性和简单部署的场景。&lt;/p>
&lt;h3 id="主要特性">主要特性&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>数据支持&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>支持 TOML、YAML 和 JSON 数据文件类型&lt;/li>
&lt;li>支持 Markdown 和 HTML 内容文件&lt;/li>
&lt;li>使用 shortcodes 添加丰富内容&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>核心功能&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>分类系统（taxonomies）&lt;/li>
&lt;li>多语言模式&lt;/li>
&lt;li>图片处理&lt;/li>
&lt;li>自定义输出格式&lt;/li>
&lt;li>HTML/CSS/JS 压缩&lt;/li>
&lt;li>支持 Sass SCSS 工作流&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="技术栈">技术栈&lt;/h3>
&lt;p>Hugo 使用了多个开源项目，主要包括：&lt;/p>
&lt;ul>
&lt;li>goldmark：Markdown 解析器&lt;/li>
&lt;li>chroma：代码高亮&lt;/li>
&lt;li>smartcrop：图片智能裁剪&lt;/li>
&lt;li>cobra：命令行接口&lt;/li>
&lt;li>viper：配置管理&lt;/li>
&lt;/ul>
&lt;h3 id="项目结构">项目结构&lt;/h3>
&lt;ul>
&lt;li>配置与版本控制相关&lt;/li>
&lt;li>开发工具与构建相关&lt;/li>
&lt;li>核心功能模块&lt;/li>
&lt;li>文档与测试相关&lt;/li>
&lt;li>内容与资源管理&lt;/li>
&lt;li>其他工具与辅助功能&lt;/li>
&lt;/ul>
&lt;h3 id="源码阅读计划">源码阅读计划&lt;/h3>
&lt;p>首先从整体上把握 Hugo 的架构，全局视角查看项目；其次分析核心模块功能的实现，了解其核心逻辑；最后深入研究扩展机制，了解如何扩展 Hugo 的功能。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>基础架构&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>项目结构分析&lt;/li>
&lt;li>核心模块识别&lt;/li>
&lt;li>启动流程追踪&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>核心功能&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>内容处理流程&lt;/li>
&lt;li>模板渲染机制&lt;/li>
&lt;li>静态文件生成&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>扩展机制&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>主题系统&lt;/li>
&lt;li>插件机制&lt;/li>
&lt;li>API 设计&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>通过源码阅读，我们将深入理解 Hugo 的设计理念和实现细节，这对于提升我们的 Go 语言开发能力和系统设计水平都有很大帮助。&lt;/p></description></item><item><title>后端常用技术总结</title><link>https://namejlt.github.io/posts/tech/practice/backend/backend-summary/</link><pubDate>Thu, 15 May 2025 10:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/practice/backend/backend-summary/</guid><description>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>服务端通用，需要了解和掌握的知识&lt;/p>
&lt;p>服务端提供稳定、可靠的服务，给用户快速的体验，保存用户数据，返回用户数据&lt;/p>
&lt;ul>
&lt;li>高可用 - 冗余设计，容错处理，自动恢复&lt;/li>
&lt;li>高并发 - 支持大量请求&lt;/li>
&lt;li>高性能 - 快速处理单个请求，并减少资源消耗&lt;/li>
&lt;/ul>
&lt;p>很多东西都是共性，且长时间不变的，需要去绝对掌握&lt;/p>
&lt;ul>
&lt;li>建立体系，从服务底层到业务层，了解各层面做什么，如何协调工作&lt;/li>
&lt;li>软件基础原理：操作系统、数据结构、数据库&lt;/li>
&lt;li>软件设计原理：设计思想、模式&lt;/li>
&lt;li>架构核心原理：原则&lt;/li>
&lt;/ul>
&lt;h2 id="程序运行">程序运行&lt;/h2>
&lt;p>基于操作系统，跑在硬件上，冯诺依曼结构的硬件体系&lt;/p>
&lt;p>进程维度，跑在内存中，通过cpu进行计算处理逻辑，对外部设备进行io数据交换&lt;/p>
&lt;p>可执行程序，会执行成为进程&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="process"
class="image_figure image_internal image_unprocessed"
src="https://namejlt.github.io/imgs/tech/practice/backend/process.jpg"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>进程包含：使用内存和cpu，内存中包含各个区间，可执行代码、堆、栈、进程数据结构&lt;/p>
&lt;p>进程是一个死循环，从入口开始，跑各种各样的函数，跳转，会操作堆内存&lt;/p>
&lt;p>计算机同时处理很多任务，cpu分时共享技术&lt;/p>
&lt;p>所以进程每个都是轮流占用时间片，有调度策略&lt;/p>
&lt;p>进程状态：&lt;/p>
&lt;p>运行，正在cpu上运行&lt;/p>
&lt;p>就绪，拿到除cpu外所有资源，等待cpu&lt;/p>
&lt;p>阻塞，因其他资源等待，让出cpu，睡眠等待其他资源成功&lt;/p>
&lt;p>进程切换消耗大，实际使用线程来占用cpu&lt;/p>
&lt;p>go使用协程，更低的降低线程切换消耗&lt;/p>
&lt;p>请求变慢，因为资源有限(内存、cpu、网络)，等待，阻塞&lt;/p>
&lt;p>阻塞越多，资源卡住，达到系统极限，系统会宕机，应用崩溃&lt;/p>
&lt;p>解决阻塞，就是资源变多，分布式架构，多副本&lt;/p>
&lt;p>请求减少，限流，应用消耗减低，降级&lt;/p>
&lt;p>并发锁的核心&lt;/p>
&lt;ul>
&lt;li>编程语言互斥锁&lt;/li>
&lt;li>原子操作，信号量cas，封装各种类型cpu&lt;/li>
&lt;li>CPU部分指令 cas，这里现代cpu都包含总线锁，多核cpu保证读写一致&lt;/li>
&lt;/ul>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;p>数组，连续有序内存，相同类型结构&lt;/p>
&lt;p>因为连续，知道下标，可以o（1）找到位置&lt;/p>
&lt;p>不知道下标，知道值，需要o(N)&lt;/p>
&lt;p>链表，地址链接的内存，可能不连续&lt;/p>
&lt;p>因为不连续，查找需要遍历，所以o（N）&lt;/p>
&lt;p>为了优化查询，插入，删除，异化了链表，各种树就出来了，有序的链表&lt;/p>
&lt;p>hash表，底层是数组&lt;/p>
&lt;p>下标通过hash函数获取，查找o（1）&lt;/p>
&lt;p>哈希冲突，一般链地址法解决，多保存几个值，go的map这样做&lt;/p>
&lt;p>栈，先进后出&lt;/p>
&lt;p>函数用这个，函数的调用，管理工作区的数据&lt;/p>
&lt;p>可以数组，也可以链表实现&lt;/p>
&lt;p>队列，先进先出&lt;/p>
&lt;p>排队的任务处理&lt;/p>
&lt;p>树&lt;/p>
&lt;p>数组、链表、栈、队列都是线性表，每个元素一个前驱，一个后继&lt;/p>
&lt;p>树是非线性的，一个元素可以多个前驱，多个后继&lt;/p>
&lt;h2 id="java虚拟机跨平台">java虚拟机跨平台&lt;/h2>
&lt;p>java如何跨平台，因为虚拟机，封装了多平台实现，不同cpu指令&lt;/p>
&lt;p>屏蔽底层不一样的东西&lt;/p>
&lt;p>jvm&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="jvm"
class="image_figure image_internal image_unprocessed"
src="https://namejlt.github.io/imgs/tech/practice/backend/jvm.jpg"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;p>JVM，它封装了⼀组⾃定义的字节码指令集，有⾃⼰的程序计数器和执⾏引&lt;/p></description></item><item><title>AI 应用开发入门指南</title><link>https://namejlt.github.io/posts/tech/ai/app-dev/start/</link><pubDate>Thu, 15 May 2025 09:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/ai/app-dev/start/</guid><description>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>AI应用开发是一项复杂的任务，需要深入理解人工智能的原理和应用。以下是学习步骤，帮助您入门AI应用开发。&lt;/p>
&lt;p>在之后的篇章中，会从概念到实战，逐步引导您掌握AI应用开发的各个方面。&lt;/p>
&lt;h2 id="一基础入门ai大模型核心概念与工具操作">一、基础入门：AI大模型核心概念与工具操作&lt;/h2>
&lt;p>AI大模型的发展堪称技术领域的一场革命，从GPT1到GPT4的演进，不仅展现了生成式AI（AIGC）的强大潜力，更重新定义了人机交互的边界。在第一阶段中，学习者将深入理解分析式AI与生成式AI的本质区别——前者聚焦数据洞察（如车险反欺诈模型），后者侧重内容创造（如文本生成、图像生成）。通过ChatGLM和Qwen等模型的实战案例，学员将掌握大模型API的调用逻辑，例如使用DashScope平台完成情感分析、表格提取等任务，同时理解Function Call机制在工具调用中的关键作用。&lt;/p>
&lt;p>在工具应用层面，Cursor编程成为核心技能之一。这款AI辅助开发工具通过Cursor Rules实现代码生成与调试，学员将通过处理多张Excel报表、搭建疫情实时监控大屏等案例，掌握数据可视化与自动化任务处理能力。此外，DeepSeek的私有化部署（如Ollama本地运行）与Prompt工程的结合，让学员学会如何通过优化提示词（如CoT分步骤推理、角色扮演）提升模型响应的准确性，例如在JSON格式生成和复杂问题拆解中应用提示词框架。&lt;/p>
&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>理清基本概念&lt;/li>
&lt;li>实践部署与API调用&lt;/li>
&lt;li>基础工具掌握（AI编程IDE、Python）&lt;/li>
&lt;/ul>
&lt;h2 id="二核心技术从向量数据库到智能体开发">二、核心技术：从向量数据库到智能体开发&lt;/h2>
&lt;p>第二阶段聚焦大模型应用的核心技术栈。Embeddings与向量数据库（如FAISS、Milvus）的结合，成为构建语义检索系统的关键。学员将通过酒店推荐系统、文本抄袭检测等案例，学习N-Gram语言模型、余弦相似度计算及Word2Vec词向量训练，理解如何将非结构化数据转化为可计算的向量表示。RAG（检索增强生成）技术则解决了大模型“知识过时”问题，通过DeepSeek+FAISS搭建本地知识库，实现PDF文本提取、语义搜索与问答链的全流程开发，同时掌握GraphRAG的全局-局部搜索机制和Qwen-Agent的多级RAG应用。&lt;/p>
&lt;p>在智能体开发领域，LangChain和Qwen-Agent成为核心框架。学员将学习如何通过LangChain的Memory、Chains组件构建具备记忆能力的智能体，例如故障诊断Agent和知识客服系统，并对比不同Agent架构（如反应式、混合式）的适用场景。Function Calling与MCP（多智能体协作协议）的结合，则进一步拓展了系统的功能性，例如通过Qwen3调用天气API、实现数据库查询可视化，以及利用A2A（Agent-to-Agent）技术协调多智能体完成篮球活动安排等复杂任务。&lt;/p>
&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>开发框架掌握&lt;/li>
&lt;li>智能体开发&lt;/li>
&lt;li>模型微调技术&lt;/li>
&lt;/ul>
&lt;h2 id="三工具进阶coze与dify的自动化实践">三、工具进阶：Coze与Dify的自动化实践&lt;/h2>
&lt;p>第三阶段围绕低代码/无代码工具展开。Coze作为智能自动化平台，其核心在于数据流处理与工作流设计。学员将学习如何通过Coze连接不同数据源（如社交媒体、CRM系统），实现数据同步、报告生成等自动化任务，并通过开发自定义插件（如定时任务调度、社交媒体自动回复）扩展平台功能。Dify的本地化部署则侧重企业级应用，学员将掌握从环境配置（数据库初始化、安全证书设置）到性能优化（负载均衡、日志管理）的全流程，例如搭建客户管理系统或数据分析平台，解决本地化场景下的数据安全与合规性问题。&lt;/p>
&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>0代码平台实践&lt;/li>
&lt;li>低代码平台实践&lt;/li>
&lt;li>理解AI应用平台设计思路&lt;/li>
&lt;/ul>
&lt;h2 id="四机器学习从算法到大赛实战">四、机器学习：从算法到大赛实战&lt;/h2>
&lt;p>第四阶段回归分析式AI基础，系统讲解机器学习七步法（数据收集→预处理→建模→评估）与十大经典算法（如逻辑回归、决策树）。通过金融反洗钱、制造业设备维护、快消品供应链预测等行业案例，学员将学会根据业务场景选择合适算法，例如用XGBoost进行员工离职预测、用ARIMA模型分析股市走势。AI大赛实战环节则聚焦时间序列预测，利用Facebook Prophet和Transformer-based模型（如Informer）解决资金流入流出预测等问题，同时掌握特征工程、模型调参与融合技巧。&lt;/p>
&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>机器学习算法&lt;/li>
&lt;li>机器学习实践&lt;/li>
&lt;/ul>
&lt;h2 id="五项目实战全流程应用与技术整合">五、项目实战：全流程应用与技术整合&lt;/h2>
&lt;p>第五阶段的实战项目将前四部分技术深度融合。在企业知识库开发中，学员通过RAG技术整合向量数据库（FAISS）与大模型（DeepSeek），实现从PDF文本提取到语义检索的问答系统，并利用Agent技术优化用户交互。交互式BI报表项目则结合Text2SQL与时间序列预测，允许用户通过自然语言查询股票走势，系统自动生成K线图、对比分析报告，背后依赖LangChain的工具调用与Qwen的生成能力。AI运营助手项目则聚焦金融场景，通过Function Calling实时获取用户持仓数据，结合Prompt工程生成个性化投顾建议，并利用RAG技术整合行业知识库提升客服准确性。&lt;/p>
&lt;p>目标：&lt;/p>
&lt;ul>
&lt;li>应用开发实战&lt;/li>
&lt;/ul></description></item></channel></rss>