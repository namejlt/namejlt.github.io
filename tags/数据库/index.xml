<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库 on LX 知识库</title><link>https://namejlt.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>Recent content in 数据库 on LX 知识库</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 31 Jul 2025 11:00:00 +0800</lastBuildDate><atom:link href="https://namejlt.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml"/><item><title>核心大表结构修改的实践</title><link>https://namejlt.github.io/posts/tech/practice/backend/big-table-alter-add-field/</link><pubDate>Thu, 31 Jul 2025 11:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/tech/practice/backend/big-table-alter-add-field/</guid><description>
&lt;h2 id="核心大表新增字段最佳实践与终极方案探讨">核心大表新增字段：最佳实践与终极方案探讨&lt;/h2>
&lt;p>在当今数据驱动的业务环境中，对核心业务表（如千万级甚至亿级的订单表）进行结构变更，是一项极具挑战性的任务。任何不慎的操作都可能导致长时间的服务中断、数据不一致甚至业务损失。本文将深入探讨在MySQL和PostgreSQL数据库中，为千万级订单表新增字段的业界最佳实践，分析如何通过表设计提高扩展性，并最终讨论在不考虑成本的情况下，类似TiDB的分布式数据库是否为终极解决方案。&lt;/p></description></item><item><title>如何快速实现一个小型数据库</title><link>https://namejlt.github.io/posts/reading/note/quesiton/small-database/</link><pubDate>Thu, 12 Jun 2025 16:00:00 +0800</pubDate><guid>https://namejlt.github.io/posts/reading/note/quesiton/small-database/</guid><description>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>数据库用来存储和查询数据，现在有很多种类的数据，提供各种各样的数据存储和查询，分别适用各种不同场景，一个最简单的acid的数据库如何实现？&lt;/p>
&lt;h2 id="回答">回答&lt;/h2>
&lt;p>ACID 是数据库事务的四个基本特性，是确保数据一致性和可靠性的关键标准：&lt;/p></description></item></channel></rss>